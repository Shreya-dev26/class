rite X86/64 ALP to simulate any one of the following Linux command ‘cp’
//THEORY

Explain all functions used in file operation

- File Open
- File Read
- File Write
- File Create
- File Close
ANS:
File Open:
• Purpose: This function is used to open an existing file or create a new file if it doesn't exist. It
prepares the file for subsequent reading or writing operations.
• Parameters:
• File Path: The path or name of the file to be opened.
• Mode: Specifies the intended file access mode (read, write, append, etc.).
• Common Functions:
In C/C++, you might use fopen() from the Standard I/O library.
In Python, you can use the open() function.

File Read:

• Purpose: This function is used to read data from an open file and store it in memory for further
processing.
• Parameters:
• File Descriptor: A reference to the open file.
• Buffer: A memory location where the read data is stored.
• Number of Bytes: The amount of data to read.
• Common Functions:
In C/C++, you might use fread() from the Standard I/O library.
In Python, you can use methods like read(), readline(), or readlines().
File Write:

• Purpose: This function is used to write data from memory to an open file. It can be used to
create or modify the content of a file.
• Parameters:
• File Descriptor: A reference to the open file.
• Buffer: The data to be written.
• Number of Bytes: The amount of data to write.
• Common Functions:
In C/C++, you might use fwrite() from the Standard I/O library.
In Python, you can use methods like write().
File Create:

• Purpose: This function is used to create a new file with a specified name. It is often used in
conjunction with the "File Open" function to create a new file and then open it.
• Parameters:
• File Path: The path or name of the file to be created.
• Common Functions:
In C/C++, you might use fopen() with a mode that includes writing ("w") to create a new file.
In Python, you can use the open() function with the "w" mode.
File Close:

• Purpose: This function is used to close an open file. It's important to close files after you've
finished reading or writing to them to release system resources.
• Parameters:
• File Descriptor: A reference to the open file.

• Common Functions:
In C/C++, you might use fclose() from the Standard I/O library.
In Python, you can use the close() method on a file object.
These functions are essential for performing file operations in various programming languages
ALGORITHM:
Write an algorithm to copy the contents from the source file to destination file.
1. Open the source file in read mode
- source_file = fopen("source.txt", "rb")
- If source_file is NULL, handle the error (e.g., file not found)

2. Open the destination file in write mode
- destination_file = fopen("destination.txt", "wb")
- If destination_file is NULL, handle the error (e.g., unable to create/overwrite)

3. Create a buffer to read and write data
- buffer = AllocateMemory(size) // Choose an appropriate buffer size

4. Read data from the source file and write it to the destination file
- while (end of source file is not reached) {
- bytesRead = fread(buffer, size, 1, source_file)
- If bytesRead is zero, it indicates the end of the file; break the loop
- fwrite(buffer, bytesRead, 1, destination_file)
}

5. Close the source and destination files
- fclose(source_file)
- fclose(destination_file)

6. Deallocate the buffer memory

7. Check for any errors during the file operations and handle them appropriately.

8. End the program

Environment -
OS - 64bit Ubuntu 12.01/Ubuntu 18
CPU – 64bit Core 2 Duo

Conclusion:
Thus, the study has done to simulate ‘cp’ command in Linux by taking flip
classroom activity using zoom meeting.



//CODE

section .data
msg1 db "Error",10
msgl1 equ $-msg1
msg2 db "File copy successfully",10
msgl2 equ $-msg2

%macro op 4
mov rax,%1
mov rdi,%2
mov rsi,%3
mov rdx,%4
syscall
%endmacro

section .bss
fname1 resb 15
fd1 resq 1
fname2 resb 15
fd2 resq 1
buff resb 512
bufflen resq 1

section .txt
global _start
_start:
pop r8
cmp r8,3
jne err
pop r8
mov rsi,fname1
above: mov al,[r8]
cmp al,00
je next
mov [rsi],al
inc r8
inc esi
jmp above

next: pop r8
mov rsi,fname2
above2:mov al,[r8]
cmp al,00
je next2
mov[rsi],al
inc r8
inc esi
jmp above2

next2:op 2,fname1,000000q,0777q
mov [fd1],rax

op 0,[fd1],buff,512
mov [bufflen],rax

op 85,fname2, 0777q,0
op 2,fname2,2,0777q
mov [fd2],rax

op 1,[fd2],buff,[bufflen]

op 3,[fd2],0,0
op 3,[fd1],0,0

op 1,1,msg2,msgl2
jmp end
err: op 1,1,msg1,msg1
end: op 60,0,0,0


