 Write an ALP to perform any two of the following string manipulation operations.
●	Concatenation of two strings.
●	Find number of words, spaces from a paragraph.

//code a
%macro scall 4          ;general macro with 4 parameters
        mov rax,%1
        mov rdi,%2
        mov rsi,%3
        mov rdx,%4
        syscall         ;call the kernel (interrupt)           
%endmacro

section .data
                
        m1 db 10d,"Enter first String : "
        l1 equ $-m1
        
	    m2 db 10d,"Enter second String : "
        l2 equ $-m2

        m3 db 10d,"Concatenated String: "
        l3 equ $-m3

        m4 db 10d,"No. of words: "
        l4 equ $-m4

	    m5 db 10d,"No. of Spaces: "
        l5 equ $-m5
        
        
        
section .bss
        
        string1 resb 25
        string2 resb 25
	    string3 resb 50
	    
        length1 resb 25
        length12 resb 25
        
        length2 resb 25
        
	    word1 resb 1
	    space2 resb 1
        
section .text
        global _start
_start:
        
              
	    scall 1,1,m1,l1    ;Enter first String: "
        scall 0,0,string1,25 ;length is returned in rax
        Dec rax
        mov [length1],rax
        mov [length12], rax
        
	    scall 1,1,m2,l2    ;Enter second String: "
        scall 0,0,string2,25 ;length is returned in rax
        Dec rax
        mov [length2],rax
              

        call Concatenate            
        call words_spaces 
	    scall 60,0,0,0 

Concatenate: 
	
		mov rsi,string1
		mov rdi,string3
	
copy1:
		mov AL, [rsi]
		mov [rdi], AL
		Inc rsi
		Inc rdi
		Dec byte[length1]
		jnz copy1

		mov rsi,string2
copy2:
		mov AL, [rsi]
		mov [rdi], AL
		Inc rsi
		Inc rdi
		Dec byte[length2]
		jnz copy2

		scall 1,1,m3,l3
		scall 1,1,string3,50
		RET 


words_spaces: 
		mov rsi,string1
		Mov BL, 00   ; to count No. of spaces 

up: 	Mov AL, [rsi]
		cmp AL, 20h
		jne  nspace
		Inc BL
nspace: Inc rsi
		Dec byte[length12]
		JNZ up
		
		scall 1,1,m5,l5   ; No. of spaces
		add BL,30h
		mov [space2],BL
		scall 1,1,space2, 1
	
	
		scall 1,1,m4, l4   ; No of words
		Inc BL
		mov [word1], BL
		scall 1,1,word1,1
		RET  


//code b

%macro scall 4          ;general macro with 4 parameters
        mov rax,%1
        mov rdi,%2
        mov rsi,%3
        mov rdx,%4
        syscall         ;call the kernel (interrupt)           
%endmacro

section .data
                
        m1 db 10d,"Enter first String : "
        l1 equ $-m1
        
	    m2 db 10d,"Enter second String : "
        l2 equ $-m2
        
        m3 db 10d,"Strings are equal "
        l3 equ $-m3
        
        m4 db 10d,"Strings are not equal : "
        l4 equ $-m4

        
        m5 db 10d,"String is Substring: "
        l5 equ $-m5

        m6 db 10d,"String is not Substring:"
        l6 equ $-m6

        m7 db 10d,"No. of occurances of substring: "
        l7 equ $-m7

	    
        
        
section .bss
        
        string1 resb 25
        string2 resb 25
	
        length1 resb 25
        length12 resb 25
        length123 resb 1
        
	length2 resb 25
	length21 resb 25
        occurance resb 1
	
        
section .text
        global _start
_start:
        
              
	    scall 1,1,m1,l1    ;Enter first String: "
        scall 0,0,string1,25 ;length is returned in rax
        mov rcx, rax
        Dec rax
        mov [length1],rax
        mov [length12], rax
        ;mov [length123], rax

	    scall 1,1,m2,l2    ;Enter second String: "
        scall 0,0,string2,25 ;length is returned in rax
        Dec rax
        mov [length2],rax
        mov [length21],rax        

        call str_equal           
        ;call substring  
	    
	    scall 60,0,0,0 

str_equal: 
	
		mov rsi,string1
		mov rdi,string2
		
		mov AL, [length1]
		cmp AL, [length2]
		JNE Exit
	
compareNext:
		mov AL, [rsi]
		cmp AL, [rdi]
		JE NEXT
		JMP Exit
NEXT:	Inc rsi
		Inc rdi
		Dec byte[length1]
		jnz compareNext

		scall 1,1,m3,l3
		JMP terminate1

Exit: 		scall 1,1,m4,l4
		
terminate1:		RET 


substring: 
	MOV CL,00 
	mov rsi,string1
	newsearch:
	mov rdi,string2
	
	
continue:
	mov AL, [rsi]
	cmp AL, [rdi]
	JE next
	
	mov rdi,string2
	inc rsi
	JMP continue
	
next:
	Inc rsi
	Inc rdi
	Dec byte[length21]
	jnz continue
	Inc CL
	
	cmp byte[rsi], 10h
	dec rcx
	JNZ newsearch
	cmp CL, 00
	JE NSBS
	scall 1,1,m4,l4
	scall 1,1,m6,l6
	add CL, 30h
	mov [occurance], CL
	scall 1,1,occurance, 1
	JMP down1
NSBS:   scall 1,1, m5,l5
down1: RET  

